//Datatype variable= Exp.  // list of list of list of  böyle devam edebilir.
List<List<SObject>>  searchResult= [FIND 'united*' IN ALL FIELDS    
                     RETURNING Account(Id, Name, Industry), Contact(Id, Name, AccountId),
                     Opportunity(Id, Name, AccountId)]; 
//  System.debug(searchResult);
for(List<SObject> search:searchResult){
    System.debug(search);
}

//Datatype variable= Exp.  // list of list of list of  böyle devam edebilir.   'united*' gerisini istediğin gibi tamamla
List<List<SObject>>  searchResult= [FIND 'united*' IN ALL FIELDS    
                     RETURNING Account(Id, Name, Industry), Contact(Id, Name, AccountId),
                     Opportunity(Id, Name, AccountId)]; 
//  System.debug(searchResult);
for(List<SObject> ListOfSObject:searchResult){
    //System.debug(search);
    for(Sobject sobj:ListOfSObject){
     System.debug(sobj);
    }
}// Hoca burada for için de for oluşturarak önce list of list of Sobject in;
// List of SObject ine girdi daha sonra ikinci for döngüsü ile SObject in içine girdi.

//Datatype variable= Exp.  // list of list of list of  böyle devam edebilir.   'united*' gerisini istediğin gibi tamamla
List<List<SObject>>  searchResult= [FIND 'united*' IN ALL FIELDS    
                     RETURNING Account(Id, Name, Industry), Contact(Id, Name, AccountId),
                     Opportunity(Id, Name, AccountId)]; 
//  System.debug(searchResult);
for(List<SObject> ListOfSObject:searchResult){
    //System.debug(search);
    for(Sobject sobj:ListOfSObject){
     System.debug(sobj.get('Name'));
    }
}// Hoca burada for için de for oluşturarak önce list of list of Sobject in;
// List of SObject ine girdi daha sonra ikinci for döngüsü ile SObject in içine girdi.
//Datatype variable= Exp.  
List<List<SObject>>  searchResult= [FIND 'edge' IN ALL FIELDS    
                     RETURNING Account(Id, Name), Contact(Id, Name, AccountId),
                     Opportunity(Id, Name, StageName,CreatedDate),Case(Id, Reason,Origin)];
List<Account> accountList = searchResult.get(0);
List<Contact> contactList = searchResult.get(1);
List<Opportunity> oppList = searchResult.get(2);

System.debug(accountList);

for(Account loopacc:accountList){
    system.debug(loopacc.Name);
}
for(Contact loopcon:contactList){
    system.debug(loopcon.Name);
}
for(Opportunity loopopp: oppList){
    system.debug(loopopp.Name);
}


//Datatype variable= Exp.  
List<List<SObject>>  searchResult= [FIND 'edge' IN ALL FIELDS    
                     RETURNING Account(Id, Name), Contact(Id, Name, AccountId),
                     Opportunity(Id, Name, StageName,CreatedDate,Amount),
                     Case(Id, Reason,Origin)];
List<Account> accountList = searchResult.get(0);
List<Contact> contactList = searchResult.get(1);
List<Opportunity> oppList = searchResult.get(2);
List<Case>       caseList = searchResult.get(3);

System.debug(accountList);

for(Account loopacc:accountList){
    system.debug(loopacc.Name);
}
for(Contact loopcon:contactList){
    system.debug(loopcon.Name);
}
for(Opportunity loopopp: oppList){
    system.debug('Name : '+loopopp.Name+' Amount : '+loopopp.Amount);
}
for(Case loopcase:caseList){
    system.debug(loopcase);
}

//0018d00000NF67OAAT > Burlington Textiles Corp of America ID ile bunu getireceğiz.
    //SOQL WHERE ID = '0018d00000NF67OAAT' diyerek getirebiliriz ya 200 olsa limit dolar tek tek yapmak 
// zorunda kalırız ama bunu MAP Account ile yapmak daha kolay
// MAP ......
    
Map<Id, Account> mapAccount = New Map<Id,Account>([SELECT Id, Name, ParentId, Phone, AccountNumber,
               Fax,Website, Industry, AnnualRevenue, NumberOfEmployees FROM Account WHERE ParentId = null]); 
Set<Id> accountIds = mapAccount.keyset();  
// .keyset(); metod kullanıldığında sadece map deki ID leri getirecek.SET in içine
for(Id accId: accountIds){                 // burada Set içine ID getirdiğimiz için for döngüsünü ID              
                                           // için tanımladık.
Account singleAcc = mapAccount.get(accId); // MAP in içinden bunu çekip getridik. böylece hepsi ile ilgili 
                                           // verileri getirebiliriz.    
System.debug(singleAcc.Name);
System.debug(singleAcc.ParentId);
System.debug(singleAcc.Phone);
System.debug(singleAcc.Industry);    
}
// burada sadece bir tanesi ile bilgileri getirirken 
Account singleAcc = mapAccount.get('0018d00000NF67OAAT'); // MAP in içinden bunu çekip getridik.
System.debug(singleAcc.Name);
System.debug(singleAcc.ParentId);
System.debug(singleAcc.Phone);
System.debug(singleAcc.Industry);


Map<Id, Account> mapAccount = New Map<Id,Account>([SELECT Id, Name, ParentId, Phone, AccountNumber,
               Fax,Website, Industry, AnnualRevenue, NumberOfEmployees FROM Account WHERE ParentId = null]); 

Map<String,Account> nametoAccount = New Map<String,Account>();

Set<Id> accountIds = mapAccount.keyset();

for( Id accId:accountIds){
    Account singleAccount = mapAccount.get(accId);
    nametoAccount.put(singleAccount.Name,singleAccount);
}
// Yukarda yeni bir map tanımladık ve bu map Name to Account cinsinden olacak ve bu OTOMATIK olmadığı için 
// Map<String,ACCOUNT> TARZINDA TANIMLADIK sonra set ile oluşturduğumuz döngü ile bilgileri bu 
//MAP in içine atadık.
Account CW =nametoAccount.get('Clarusway');
System.debug(CW.phone);
Account Edge = nametoAccount.get('Edge Communications');
System.debug(Edge.phone);

Map<Id,Contact> mapContact = New Map<Id,Contact>([SELECT Id, Name
                            FROM Contact WHERE AccountId=:accountIds]);
for( Contact conId:[SELECT Id, Name FROM Contact WHERE AccountId=:accountIds]){
    System.debug(conId);
}
// bu şekilde de döngü oluşturabiliyoruz ama hoca bunu sevmiyor.
